# -*- coding: utf-8 -*-
"""Monitor price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bIgJO85Q0O94TZ4xTmolartzQOQMgTpH
"""

import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression,Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from imblearn.under_sampling import RandomUnderSampler,NearMiss
from imblearn.over_sampling import RandomOverSampler,SMOTE
from collections import Counter
from sklearn.svm import SVR
import numpy as np
from sklearn.preprocessing import MinMaxScaler

"""# New section

**DATA Collection and pre-processing**
"""

m_dataset=pd.read_csv('/content/Monitor_data.csv')

"""# New Section"""

#inspecting first 5 rows
m_dataset.head()

#shape of the data
m_dataset.shape

#info about the dataset
m_dataset.info()

m_dataset.isnull().sum()

#checking the distribution
print(m_dataset.Brand.value_counts())
print(m_dataset.Display_Type.value_counts())
print(m_dataset.Display_Resolution.value_counts())

#encoding
m_dataset.replace({'Brand':{'HP':0,'Dell':1,'LG':2,'Asus':3,'Samsung':4}},inplace=True)
m_dataset.replace({'Display_Type':{'FHD LED':0,'FHD IPS':1,'HD LED':2,'CURVED VA':3,
'CURVED LED':4,'4K UHD':5,'2K QHD LED':6,'2K WQHD LED':7,

}},inplace=True)


m_dataset.replace({'Display_Resolution':{'1920 x 1080':0,'2560 x 1440':1,'3840 x 2160':2,'1366 x 768':3,
'3440 x 1440':4,'5120 x 2160':5,'1600 x 900':6,'1280 x 1024':7,'2560 x 1600':8,
}},inplace=True)

m_dataset.head()

"""Splitting data and target"""

#seperating the Predicted feature from the target feature

dependent='Price'
independent=m_dataset.columns.tolist()
independent.remove(dependent)
X=m_dataset[independent].values
Y=m_dataset[dependent].values
Y=Y.reshape(-1,1)




#X=m_dataset.drop(['Price','Display_Resolution'],axis=1)
#Y=m_dataset['Price']

print(X)

"""Splitting training and test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,random_state=2)
mm=MinMaxScaler()
# data normaliztion
X_train=mm.fit_transform(X_train)
X_test=mm.fit_transform(X_test)
Y_test=mm.fit_transform(Y_test)
Y_train=mm.fit_transform(Y_train)

print(Y_train)

print(X_train.shape[0])
print(X_test.shape[0])

#print(sorted(Counter(Y_train).items()))
ros=RandomOverSampler(random_state=42)



"""**MODEL TRAINING**

**1.Linear Regression**
"""

#load model
lin_reg_model=LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""**MODEL EVALUATION**"""

#prediction on training data

training_data_prediction=lin_reg_model.predict(X_train)

#R sqaured error,mean sqaure error,MAE ,RMSE
error_score=metrics.r2_score(Y_train,training_data_prediction)
print('R squared error ',error_score)
error_score1=metrics.mean_squared_error(Y_train,training_data_prediction)
print('Mean sqaure  error ',error_score1)
error_score3=metrics.mean_absolute_error(Y_train,training_data_prediction)
print('Mean Absolute  error ',error_score3)

error_score4=metrics.mean_squared_error(Y_train,training_data_prediction)
print('Root Mean sqaure  error ',error_score4)

"""**Visualize the actual price and predicted price**"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual price vs Predicted Price ")
plt.show()

#prediction on test data
test_data_prediction=lin_reg_model.predict(X_test)

#R sqaured error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print('R squared error ',error_score)
error_score1=metrics.mean_squared_error(Y_test,test_data_prediction)
print('Mean sqaure  error ',error_score1)
error_score3=metrics.mean_absolute_error(Y_test,test_data_prediction)
print('Mean Absolute  error ',error_score3)

error_score4=metrics.mean_squared_error(Y_test,test_data_prediction)
print('Root Mean sqaure  error ',error_score4)

"""Lasso Regression

"""

#load model
lass_reg_model= Lasso()

lass_reg_model.fit(X_train,Y_train)

"""**MODEL EVALUATION**"""

#prediction on training data

training_data_prediction=lass_reg_model.predict(X_train)

#R sqaured error
error_score=metrics.r2_score(Y_train,training_data_prediction)
print('R squared error ',error_score)
error_score1=metrics.mean_squared_error(Y_train,training_data_prediction)
print('Mean sqaure  error ',error_score1)
error_score3=metrics.mean_absolute_error(Y_train,training_data_prediction)
print('Mean Absolute  error ',error_score3)

error_score4=metrics.mean_squared_error(Y_train,training_data_prediction)
print('Root Mean sqaure  error ',error_score4)

"""**Visualize the actual price and predicted price**"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual price vs Predicted Price ")
plt.show()

#prediction on test data
test_data_prediction=lass_reg_model.predict(X_test)

#R sqaured error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print('R squared error ',error_score)
error_score1=metrics.mean_squared_error(Y_test,test_data_prediction)
print('Mean sqaure  error ',error_score1)
error_score3=metrics.mean_absolute_error(Y_test,test_data_prediction)
print('Mean Absolute  error ',error_score3)

error_score4=metrics.mean_squared_error(Y_test,test_data_prediction)
print('Root Mean sqaure  error ',error_score4)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual price vs Predicted Price ")
plt.show()



"""**DEcision Tree**"""

#load model
dt=DecisionTreeRegressor(random_state=42)

dt.fit(X_train,Y_train)

#prediction on training data

training_data_prediction=dt.predict(X_train)

#R sqaured error
error_score=metrics.r2_score(Y_train,training_data_prediction)


print('R squared error ',error_score)
error_score1=metrics.mean_squared_error(Y_train,training_data_prediction)
print('Mean sqaure  error ',error_score1)
error_score3=metrics.mean_absolute_error(Y_train,training_data_prediction)
print('Mean Absolute  error ',error_score3)

error_score4=metrics.mean_squared_error(Y_train,training_data_prediction)
print('Root Mean sqaure  error ',error_score4)

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual price vs Predicted Price ")
plt.show()

#prediction on test data
test_data_prediction=dt.predict(X_test)
#R sqaured error
error_score=metrics.r2_score(Y_test,test_data_prediction)
error_score1=metrics.mean_squared_error(Y_test,test_data_prediction)
error_score3=metrics.mean_absolute_error(Y_test,test_data_prediction)

error_score4=metrics.mean_squared_error(Y_test,test_data_prediction)

print('R squared error ',error_score)
print('mean Sqaured Error',error_score1)
print('Mean Absolute  error ',error_score3)
print('Root Mean sqaure  error ',error_score4)

"""**Random Forest**"""

rf=RandomForestRegressor()

rf.fit(X_train,Y_train)

y_pred=rf.predict(X_train)

#R sqaured error
error_score=metrics.r2_score(Y_train,y_pred)

error_score1=metrics.mean_squared_error(Y_train,y_pred)
error_score3=metrics.mean_absolute_error(Y_train,y_pred)

error_score4=metrics.mean_squared_error(Y_train,y_pred)

print('R squared error ',error_score)
print('mean Sqaured Error',error_score1)
print('Mean Absolute  error ',error_score3)
print('Root Mean sqaure  error ',error_score4)

#prediction on test data
y_tpred=rf.predict(X_test)
#R sqaured error
error_score=metrics.r2_score(Y_test,y_tpred)
error_score1=metrics.mean_squared_error(Y_test,y_tpred)
error_score3=metrics.mean_absolute_error(Y_test,y_tpred)

error_score4=metrics.mean_squared_error(Y_test,y_tpred)



print('R squared error ',error_score)
print('mean Sqaured Error',error_score1)
print('Mean Absolute  error ',error_score3)
print('Root Mean sqaure  error ',error_score4)

"""**SVM REGressor**"""

#
regressor=SVR(kernel='poly')

regressor.fit(X_train,Y_train)

Y_pred=regressor.predict(X_train)

#R sqaured error
error_score=metrics.r2_score(Y_train,Y_pred)

error_score1=metrics.mean_squared_error(Y_train,Y_pred)
error_score3=metrics.mean_absolute_error(Y_train,Y_pred)

error_score4=metrics.mean_squared_error(Y_train,Y_pred)
print('R squared error ',error_score)
print('mean Sqaured Error',error_score1)
print('Mean Absolute  error ',error_score3)
print('Root Mean sqaure  error ',error_score4)

#prediction on test data
y_tpred=rf.predict(X_test)
#R sqaured error
error_score=metrics.r2_score(Y_test,y_tpred)
error_score1=metrics.mean_squared_error(Y_test,y_tpred)
error_score3=metrics.mean_absolute_error(Y_test,y_tpred)

error_score4=metrics.mean_squared_error(Y_test,y_tpred)
print('R squared error ',error_score)
print('mean Sqaured Error',error_score1)
print('Mean Absolute  error ',error_score3)
print('Root Mean sqaure  error ',error_score4)

"""**K-Nearest Neighbours**

"""

knn=KNeighborsRegressor(n_neighbors=15)

knn.fit(X_train,Y_train)

Y_pred=knn.predict(X_train)

#R sqaured error
error_score=metrics.r2_score(Y_train,Y_pred)

error_score1=metrics.mean_squared_error(Y_train,Y_pred)
error_score3=metrics.mean_absolute_error(Y_train,Y_pred)

error_score4=metrics.mean_squared_error(Y_train,Y_pred)
print('R squared error ',error_score)
print('mean Sqaured Error',error_score1)
print('Mean Absolute  error ',error_score3)
print('Root Mean sqaure  error ',error_score4)

#prediction on test data
y_tpred=knn.predict(X_test)
#R sqaured error
error_score=metrics.r2_score(Y_test,y_tpred)
error_score1=metrics.mean_squared_error(Y_test,y_tpred)
error_score3=metrics.mean_absolute_error(Y_test,y_tpred)

error_score4=metrics.mean_squared_error(Y_test,y_tpred)
print('R squared error ',error_score)
print('mean Sqaured Error',error_score1)
print('Mean Absolute  error ',error_score3)
print('Root Mean sqaure  error ',error_score4)